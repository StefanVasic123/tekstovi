generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

model Post {
  id          String     @default(cuid()) @id
  title       String
  content     String?
  genre       String?
  gender      String?    @default("male")
  date        String
  createdAt   DateTime   @default(now())  // Add createdAt field
  published   Boolean    @default(false)
  certified   Boolean    @default(false)
  paid        Boolean    @default(false)
  free        Boolean    @default(false)
  language    String?
  likeCount   Int        @default(0)
  role        String?
  voiceCover  String?    
  author      User?      @relation(fields: [authorId], references: [id])
  authorId    String?
  listPlaceId Int        @default(0)
  likes       Like[]
  comments    Comment[]
  promotion   Promotion?
}

model Promotion {
  id            String    @id @default(cuid())
  postId        String    @unique
  promoted      Boolean   @default(false)
  datePromoted  DateTime  @default(now())
  post          Post      @relation(fields: [postId], references: [id])
  expires_at    DateTime  @default(now())
}

enum UserRole {
  USER
  ADMIN
  LYRICIST
  PRODUCER
  LYRICIST_PRODUCER
}

model User {
  id            String    @id  @default(cuid())
  name          String?
  email         String?   @unique
  password      String?
  role          UserRole  @default(LYRICIST)
  language      String?
  country       String?
  state         String?
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  createdAt     DateTime  @default(now()) @map(name: "created_at")
  updatedAt     DateTime  @updatedAt @map(name: "updated_at")
  profileImage  String?
  posts         Post[]
  likes         Like[]
  comments      Comment[]
  replies       Reply[]
  @@map(name: "users")
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  promoted           Boolean   @default(false)
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model VerificationToken {
  id      String @id @default(cuid())
  email   String
  token   String @unique
  expires DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id      String @id @default(cuid())
  email   String
  token   String @unique
  expires DateTime

  @@unique([email, token])
}

model Like {
  id      String  @id @default(cuid())
  userId  String
  postId  String
  user    User    @relation(fields: [userId], references: [id])
  post    Post    @relation(fields: [postId], references: [id])
}

model Comment {
  id        String   @id @default(cuid())
  postId    String
  userId    String
  content   String
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
  post      Post     @relation(fields: [postId], references: [id])
  userImage String?  // Add userImage field to store user's image URL
  replies   Reply[]  @relation("ReplyToComment")
}

model Reply {
  id          String   @id @default(cuid())
  commentId   String
  userId      String
  content     String
  createdAt   DateTime @default(now())
  user        User     @relation(fields: [userId], references: [id])
  comment     Comment  @relation("ReplyToComment", fields: [commentId], references: [id]) 
  userImage   String?  // Add userImage field to store user's image URL
}
