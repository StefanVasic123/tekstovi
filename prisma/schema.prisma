generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

model Post {
  id          String     @default(cuid()) @id
  title       String
  content     String?
  genre       String
  gender      String     @default("male")
  date        String
  published   Boolean    @default(false)
  voiceCover  String?    
  author      User?      @relation(fields: [authorId], references: [id])
  authorId    String?
  listPlaceId Int        @default(0)
}

enum UserRole {
  ADMIN
  USER
}

model User {
   id           String  @id  @default(cuid())
  name          String?
  email         String?   @unique
  password      String?
  role          UserRole @default(USER)
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  createdAt     DateTime  @default(now()) @map(name: "created_at")
  updatedAt     DateTime  @updatedAt @map(name: "updated_at")
  posts         Post[]
  @@map(name: "users")
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model VerificationToken {
  id  String @id @default(cuid())
  email String
  token String @unique
  expires DateTime

  @@unique([email, token])
}